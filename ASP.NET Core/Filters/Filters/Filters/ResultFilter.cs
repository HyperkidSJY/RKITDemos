using Microsoft.AspNetCore.Mvc.Filters;

namespace Filters.Filters
{
    /// <summary>
    /// Custom result filter that logs information before and after a result is executed.
    /// A Result Filter in ASP.NET Core is part of the filtering mechanism that allows you 
    /// to run custom code during the result execution phase of the request pipeline. 
    /// It allows you to intercept the result (response) that is being generated by an action
    /// method before or after it's executed.
    /// </summary>
    public class ResultFilter : IResultFilter
    {
        private readonly ILogger<ResultFilter> _logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultFilter"/> class.
        /// </summary>
        /// <param name="logger">The logger to log the information for result execution.</param>
        public ResultFilter(ILogger<ResultFilter> logger)
        {
            _logger = logger;
        }

        #region OnResultExecuting Method
        /// <summary>
        /// This method is called before the result is executed.
        /// </summary>
        /// <param name="context">Provides information about the current HTTP request and the result that will be executed.</param>
        public void OnResultExecuting(ResultExecutingContext context)
        {
            // Log the result before it is executed.
            _logger.LogInformation("Before executing result: {Result}", context.Result);
        }
        #endregion

        #region OnResultExecuted Method
        /// <summary>
        /// This method is called after the result has been executed.
        /// </summary>
        /// <param name="context">Provides information about the result after it has been executed.</param>
        public void OnResultExecuted(ResultExecutedContext context)
        {
            // Log the result after it has been executed.
            _logger.LogInformation("After executing result: {Result}", context.Result);
        }
        #endregion
    }
}
